@startuml

actor Operations
entity Component
participant ComponentImplementation
participant ComponentOperator
entity DependentAPI
participant DependentAPIOperator
participant IdentityConfigOperator
participant "Identity Management System"
participant "Canvas.Info service"
boundary "Dependent API Endpoint"


Operations -> Component : Install
Operations -> ComponentImplementation : Install
Component -> ComponentOperator: on.create 
ComponentOperator -> DependentAPI: create
note right
    A separate DependentAPI resource is created
    for each dependent API in the core function,
    security and management sections
end note
group For each dependent API
    DependentAPI -> DependentAPIOperator: on.create
    DependentAPIOperator -> "Canvas.Info service" : Register the availability of the downstraem API(s)
    "Canvas.Info service" -> IdentityConfigOperator: listen for new Service in state 'inactive'
    IdentityConfigOperator -> "Identity Management System" : Grant to a role on the downstraem API(s)
    IdentityConfigOperator -> "Canvas.Info service": Update state to 'active'
    DependentAPI <- DependentAPIOperator: update
    Component <- ComponentOperator: update 
end
group During Component runtime execution
    ComponentImplementation -> "Canvas.Info service": query for APIs matching declared dependencies using Component Client ID and secret
    note right
        The component can query with a GET on the Canvas.Info service or register for callback notifications.
        There could be more than 1 API available for a given dependency.
    end note
    ComponentImplementation -> "Dependent API Endpoint": Call using Component Client ID and secret

end
@enduml